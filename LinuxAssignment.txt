EXERCISE-1
1. Create folder 'Test' in your home directory
mkdir Test

2. Create below files​
  - employeelist​
touch employeelist
  - skillset
touch skillset

3. Create folder Test2 in home directory​
  - create symbolink and hard link for skillset file 
ln skillset hardlink (it creates the hardlink for the skillset file.)
ln -s skillset symlink (it creates the symbollic link for the skillset file)
  - delete skillset file and check if hardlink and symbolic link file exists​
rm skillset (yes, the symbolic link still exists but is not accessible.)
  - explain the difference b/n symbolic and hard links
symbolic link links to the path name directly.
hard links acts as a mirror copy to the selected files.

4. Provide read and write permission to 'user2' group​
   test if user2 group users can access the file​
sudo chgrp user2 employeelist
chmod g+rw employeelist
Yes, user2 can access the file.

5. Revoke write permission from user2 group and test the access again​
chmod g-w employeelist
Yes, the write permission access is denied to user2.

6. Grant write permission for others and test it ​
chmod o+w employeelist
Yes, other can edit the employeelist file(has the write access).

7. Revoke write permission for others and test again​
chmod o-w employeelist
The others can not edit the employeelist file and the write access is denied.

8. Change the group of employeelist file to 'user3'​
  test if user3 group have access​
sudo chgrp user3 employeelist
Yes, user3 have the access to the employeelist file.

9. Change ownership of the file to user5 and test​
sudo chown user5 employeelist
Yes, user5 have the access to the employeelist file.

10. check how many employees are there  (hint: use wc command)​
wc -l employeelist
It displays number of employees in the employeelist file.


EXERCISE - 2

Create file “File1”​
touch file1

Append 2 more lines to the same file​
 cat >>file1 (adding line to the file1.)
My name is sravya sri.
cat file1 >>file (appending file to file1)

Create File2 with few lines​
cat >>file2
hello
how are you
i'm file

Display the contents of both File1 and File2​
 cat file1 file2
My name is sravya sri.
hello
how are you
i'm file

Concatenate both File1 & 2​
cat file1 file2
My name is sravya sri.
hello
how are you
i'm file

Send the above output to File3
cat file1 file2 & >file3
[1] 8719
user1@ETGTrainingLinux:~$ My name is sravya sri.
hello
how are you
i'm file

Read File1,File2,File3… File5 . Observe the output​
cat file1 file2 file3 file4 file5 (prints the output of files 1,2,3 and error message for file 4 and 5 because they do not exist.)
My name is sravya sri.
hello
how are you
i'm file
cat: file4: No such file or directory
cat: file5: No such file or directory

Redirect the errors of the above command to “errorlog”​
cat file1 file2 file3 file4 file5 2>/dev/null
My name is sravya sri.
hello
how are you
i'm file

Concatenate name File1 to 5 and store it in File 10. if any errors, log them in the same file ​
cat file1 file2 file3 file4 file5 >&file10
user1@ETGTrainingLinux:~$ cat file10
My name is sravya sri.
hello
how are you
i'm file
cat: file4: No such file or directory
cat: file5: No such file or directory
user1@ETGTrainingLinux:~$

Copy File1 to File6. Add the errors to “errorlog”​
cp file1 file6 2>/dev/null


EXERCISE - 3

The 10th to 25th  lines in a file​
tail -16 file
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25

List only 10th line in a file​
head -10 file | tail -1
10


EXERCISE - 4

Lines containing A​
 ls | grep "a"

lines containing The at the beginning​
 ls | grep ^"The"

lines  ending with  .	​
 ls | grep [.]$

lines with a,b or c as the second letter​
ls | grep ^.[a,b,c]

lines which contain def , deef or deeeef 
 ls | grep ^.["def","deef","deeef"]$

lines not having numbers at the beginning
ls | grep ^[a-z]

empty lines​
 grep ^$ file

list the password file details of user1 - user10​
grep ^user[0-9] /etc/passwd | head -10
user1:x:1001:1001:user1,,,:/home/user1:/bin/bash
user2:x:1002:1002:user2,,,:/home/user2:/bin/bash
user3:x:1003:1003:user3,,,:/home/user3:/bin/bash
user4:x:1004:1004:user4,,,:/home/user4:/bin/bash
user5:x:1005:1005:user5,,,:/home/user5:/bin/bash
user6:x:1006:1006:user6,,,:/home/user6:/bin/bash
user7:x:1007:1007:user7,,,:/home/user7:/bin/bash
user8:x:1008:1008:user8,,,:/home/user8:/bin/bash
user9:x:1009:1009:user9,,,:/home/user9:/bin/bash
user10:x:1010:1010:user10,,,:/home/user10:/bin/bash

list only directories​
ls | grep ^d
dir123
dir2


EXERCISE - 5

Create a file which contains long listing of the files in root directory​
ls -li /home/user1/ >longlistfile

Sort the file based only on the inode count​
 sort -nk 1 longlistfile

Sort the file based on the user name and group name in reverse order​
 sort -k 4,5 longlistfile

Sort the file based on the file size and store the output in a file called sortedfile
 touch sortedfile
user1@ETGTrainingLinux:~$ sort -nk 6 longlistfile >sortedfile


EXERCISE - 6

Run a sort command of a large file at the background​
sleep 15& (the command given below executed at the background and the output is displayed after 15 seconds.)
sort -rk 10 longlistfile

Run a sort command of a large file at the background using nohup​
nohup sleep 15&
sort -rk 10 longlistfile

Check what happens when you log off for the above​
for the first one, without nohup, the process will be terminated and will not run when you login again.
for the second one, with nohup, when you logoff, the process still runs in the background in the system daemon process. Hence, if you login back and check, the process will still be in running state and will not be terminated.

Write a command that sleeps for 5 seconds and then prints hello​
sleep 5&
echo "Hello"



